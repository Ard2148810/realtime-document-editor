{"version":3,"sources":["components/CornerTriangle.js","components/Header.js","components/TextEditor.js","components/User.js","components/Users.js","components/Login.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["CornerTriangle","props","style","borderColor","getColorValueBySide","sideY","sideX","borderWidth","size","sideWanted","sideExpected","color","className","Header","TextEditor","text","this","content","onChange","setContent","options","placeholder","Component","User","show","borderLeft","transform","name","Users","toggleVisibility","setState","prevState","visible","state","colors","users","map","user","index","key","length","Provider","value","onClick","transition","boxShadow","Login","setInputValue","event","target","onEnterClicked","preventDefault","setUserName","type","margin","React","Main","userNameSelected","Footer","Date","getFullYear","webSocket","WebSocket","App","onContentChanged","sendContent","msg","send","JSON","stringify","onmessage","data","parse","concat","filter","console","log","author","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uSAwBeA,MAtBf,SAAwBC,GAAQ,IAAD,EACrBC,GAAK,GACPC,YAAY,aAAD,OACTC,EAAoBH,EAAMI,MAAO,OADxB,qBAETD,EAAoBH,EAAMK,MAAO,SAFxB,qBAGTF,EAAoBH,EAAMI,MAAO,UAHxB,qBAITD,EAAoBH,EAAMK,MAAO,SACnCC,YAAY,GAAD,OAAKN,EAAMO,KAAO,EAAlB,OANJ,cAONP,EAAMK,MAAQ,GAPR,cAQNL,EAAMI,MAAQ,GARR,yBASG,YATH,GAYX,SAASD,EAAoBK,EAAYC,GACrC,OAAOD,IAAeC,EAAeT,EAAMU,MAAQ,cAGvD,OACI,yBAAKC,UAAU,WAAWV,MAAOA,KCR1BW,MATf,WACI,OACI,2DAEI,kBAAC,EAAD,CAAgBP,MAAM,OAAOD,MAAM,SAASM,MAAO,cAAeH,KAAM,O,iBCqBrEM,G,mLAnBP,OACI,yBAAKF,UAAU,kBACX,kBAAC,EAAD,CAAgBN,MAAM,OAAOD,MAAM,MAAMM,MAAO,UAAWH,KAAM,KACjE,kBAAC,IAAD,CACII,UAAU,cACVG,KAAMC,KAAKf,MAAMgB,QACjBC,SAAUF,KAAKf,MAAMkB,WACrBC,QAAS,CACLC,YAAa,CACTN,KAAM,Y,GAZTO,cCeVC,E,uKAhBP,OACI,yBACIX,UAAS,cAASI,KAAKf,MAAMuB,KAAO,GAAK,gBACzCtB,MAAO,CAACuB,WAAW,aAAD,OAAeT,KAAKf,MAAMU,SAE5C,0BACIT,MAAO,CAACwB,UAAWV,KAAKf,MAAMuB,KAAO,gBAAkB,qBACvDZ,UAAW,cAEVI,KAAKf,MAAM0B,W,GAZbL,a,eCgDJM,E,kDA3CX,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IAQV4B,iBAAmB,WACf,EAAKC,UAAS,SAAAC,GACV,MAAO,CACHC,SAAUD,EAAUC,aAV5B,EAAKC,MAAQ,CACTD,SAAS,GAEb,EAAKE,OAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACxF,WANW,E,qDAiBT,IAAD,OACCC,EAAQnB,KAAKf,MAAMkC,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAC/B,kBAAC,EAAD,CACIC,IAAKF,EACLV,KAAMU,EACN1B,MAAO,EAAKuB,OAAOI,EAAQ,EAAKJ,OAAOM,QACvChB,KAAM,EAAKS,MAAMD,aAEzB,OACI,yBAAKpB,UAAU,SACX,kBAAC,IAAY6B,SAAb,CAAsBC,MAAO,CAAC/B,MAAO,UACjC,4BACIgC,QAAS3B,KAAKa,iBACdjB,UAAU,wBACVV,MAAO,CAAE0C,WAAY,WAAYC,UAAW7B,KAAKiB,MAAMD,QAAU,OAAS,4BAE1E,kBAAC,IAAD,OAEHG,Q,GArCDb,aC8CLwB,E,kDA5CX,WAAY7C,GAAQ,IAAD,8BACf,cAAMA,IAMV8C,cAAgB,SAACC,GAAW,IAAD,EACDA,EAAMC,OAArBtB,EADgB,EAChBA,KAAMe,EADU,EACVA,MACb,EAAKZ,SAAL,eAAgBH,EAAOe,KATR,EAYnBQ,eAAiB,SAACF,GACdA,EAAMG,iBACN,EAAKlD,MAAMmD,YAAY,EAAKnB,MAAMN,OAZlC,EAAKM,MAAQ,CACTN,KAAM,IAHK,E,qDAkBf,OACI,yBAAKf,UAAU,mBACX,yBAAKA,UAAU,SACX,kBAAC,EAAD,CAAgBN,MAAM,OAAOD,MAAM,MAAMM,MAAO,UAAWH,KAAM,KACjE,kBAAC,IAAYiC,SAAb,CAAsBC,MAAO,CAAE/B,MAAO,kBAClC,kBAAC,IAAD,CAAcH,KAAM,QACpB,2BAAG,mDACH,6BACI,2BACI6C,KAAK,OACL1B,KAAK,OACLN,YAAY,WACZqB,MAAO1B,KAAKiB,MAAMN,KAClBT,SAAUF,KAAK+B,cACf7C,MAAO,CAAEoD,OAAQ,WAG7B,4BAAQX,QAAS3B,KAAKkC,eAAgBtC,UAAU,gBAAhD,gB,GArCA2C,IAAMjC,WCcXkC,MAdf,SAAcvD,GACV,OACI,8BACI,kBAAC,EAAD,CAAOkC,MAAOlC,EAAMkC,QACnBlC,EAAMwD,iBACH,kBAAC,EAAD,CAAYxC,QAAShB,EAAMgB,QAASE,WAAYlB,EAAMkB,aAEtD,kBAAC,EAAD,CAAOiC,YAAanD,EAAMmD,gBCE3BM,MAXf,WACI,OACI,gCACI,kBAAC,EAAD,CAAgBpD,MAAM,QAAQD,MAAM,MAAMM,MAAO,cAAeH,KAAM,KACtE,6DAC8B,IAAImD,MAAOC,iBCCjDC,G,MAAY,IAAIC,UAAJ,eAFA,YAEA,YAHH,UAsGEC,E,kDA/FX,WAAY9D,GAAQ,IAAD,8BACf,cAAMA,IA8CV+D,iBAAmB,SAAC/C,GAChB,EAAKa,SAAS,CAAEb,QAASA,IACzB,EAAKgD,YAAYhD,IAjDF,EAoDnBmC,YAAc,SAACzB,GACX,EAAKG,UAAU,SAAAC,GAEX,MAAO,CACHI,MAFU,sBAAOJ,EAAUI,OAAjB,CAAwBR,IAGlC8B,kBAAkB,MAI1B,IAAMS,EAAM,CACRb,KAAM,UACN1B,KAAMA,GAEVkC,EAAUM,KAAKC,KAAKC,UAAUH,KA/D9B,EAAKjC,MAAQ,CACThB,QAAS,GACTkB,MAAO,GACPsB,kBAAkB,GALP,E,gEASE,IAAD,OAEhBI,EAAUS,UAAY,SAACJ,GACnB,IAAMK,EAAOH,KAAKI,MAAMN,EAAIK,MAC5B,OAAOA,EAAKlB,MACR,IAAK,UACD,EAAKvB,SAAS,CAAEb,QAASsD,EAAKtD,UAC9B,MAEJ,IAAK,UACD,EAAKa,UAAS,SAAAC,GAEV,MAAO,CAAEI,MADK,sBAAOJ,EAAUI,OAAjB,CAAwBoC,EAAK5C,WAG/C,MAEJ,IAAK,cACD,EAAKG,UAAS,SAAAC,GAEV,MAAO,CAAEI,MADQJ,EAAUI,MAAMsC,OAAOF,EAAKpC,OACnBlB,QAASsD,EAAKtD,YAE5C,MAEJ,IAAK,mBACD,EAAKa,UAAS,SAAAC,GAIV,MAAO,CAAEI,MAHQJ,EAAUI,MAAMuC,QAAO,SAAArC,GACpC,OAAOA,IAASkC,EAAK5C,YAI7B,MAEJ,QAASgD,QAAQC,IAAR,gCAAqCV,EAAIb,W,kCA2BlDpC,GACR,IAAMiD,EAAM,CACRb,KAAM,UACNwB,OAAQ,oBACR5D,QAASA,GAEb4C,EAAUM,KAAKC,KAAKC,UAAUH,M,+BAI9B,OACI,yBAAKtD,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIK,QAASD,KAAKiB,MAAMhB,QACpBE,WAAYH,KAAKgD,iBACjB7B,MAAOnB,KAAKiB,MAAME,MAClBsB,iBAAkBzC,KAAKiB,MAAMwB,iBAC7BL,YAAapC,KAAKoC,cAEtB,kBAAC,EAAD,W,GA1FE9B,aCCEwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.6c105f52.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction CornerTriangle(props) {    // Parent must have position set to relative\n    const style = {\n        borderColor: `\n        ${getColorValueBySide(props.sideY, \"top\")}\n        ${getColorValueBySide(props.sideX, \"right\")}\n        ${getColorValueBySide(props.sideY, \"bottom\")}\n        ${getColorValueBySide(props.sideX, \"left\")}`,\n        borderWidth: `${props.size / 2}px`,\n        [props.sideX]: 0,\n        [props.sideY]: 0,\n        position: \"absolute\"\n    }\n\n    function getColorValueBySide(sideWanted, sideExpected) {\n        return sideWanted === sideExpected ? props.color : \"transparent\"\n    }\n\n    return (\n        <div className=\"triangle\" style={style}/>\n    )\n}\n\nexport default CornerTriangle\n","import React from \"react\"\nimport CornerTriangle from \"./CornerTriangle\";\n\nfunction Header() {\n    return (\n        <header>\n            REALTIME DOCUMENT EDITOR\n            <CornerTriangle sideX=\"left\" sideY=\"bottom\" color={\"floralwhite\"} size={24}/>\n        </header>\n    )\n}\n\nexport default Header\n","import React, {Component} from \"react\"\nimport Editor from'react-medium-editor'\nimport 'medium-editor/dist/css/medium-editor.css';\nimport 'medium-editor/dist/css/themes/default.css';\nimport CornerTriangle from \"./CornerTriangle\";\n\nclass TextEditor extends Component {\n\n    render() {\n        return (\n            <div className=\"editor-wrapper\">\n                <CornerTriangle sideX=\"left\" sideY=\"top\" color={\"#BBBBBB\"} size={24} />\n                <Editor\n                    className=\"text-editor\"\n                    text={this.props.content}\n                    onChange={this.props.setContent}\n                    options={{\n                        placeholder: {\n                            text: \"\"\n                        }\n                    }}\n                />\n            </div>\n        )\n    }\n\n}\n\nexport default TextEditor;\n","import React, {Component} from \"react\"\n\nclass User extends Component {\n\n    render() {\n        return (\n            <div\n                className={`user${this.props.show ? \"\" : \" user-folded\"}`}\n                style={{borderLeft: `5px solid ${this.props.color}`}}\n            >\n                <span\n                    style={{transform: this.props.show ? \"translateX(0)\" : \"translateX(-100%)\"}}\n                    className={\"name-label\"}\n                >\n                    {this.props.name}</span>\n            </div>\n        );\n    }\n\n}\n\nexport default User\n","import React, {Component} from \"react\"\nimport User from \"./User\";\nimport {FaUsers} from 'react-icons/fa'\nimport {IconContext} from \"react-icons\";\n\nclass Users extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible: true\n        }\n        this.colors = [\"#1E90FF\", \"#DAA520\", \"#CD5C5C\", \"#9370DB\", \"#FF4500\", \"#8B4513\", \"#40E0D0\", \"#708090\",\n            \"#000000\"]\n    }\n\n    toggleVisibility = () => {\n        this.setState(prevState => {\n            return {\n                visible: !prevState.visible\n            }\n        })\n    }\n\n    render() {\n        const users = this.props.users.map((user, index) =>\n            <User\n                key={user}\n                name={user}\n                color={this.colors[index % this.colors.length]}\n                show={this.state.visible}\n            />)\n        return (\n            <div className=\"users\">\n                <IconContext.Provider value={{color: \"white\"}}>\n                    <button\n                        onClick={this.toggleVisibility}\n                        className=\"btn-switch-users-show\"\n                        style={{ transition: \"all 0.5s\", boxShadow: this.state.visible ? \"none\" : \"0 0 10px 3px lightgreen\"}}\n                    >\n                        <FaUsers/>\n                    </button>\n                    {users}\n                </IconContext.Provider>\n            </div>\n        )\n    }\n\n}\n\nexport default Users","import React from \"react\"\nimport { IconContext } from \"react-icons\"\nimport { FaUserCircle } from \"react-icons/all\";\nimport CornerTriangle from \"./CornerTriangle\";\n\nclass Login extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            name: \"\"\n        }\n    }\n\n    setInputValue = (event) => {\n        const {name, value} = event.target\n        this.setState({[name]: value})\n    }\n\n    onEnterClicked = (event) => {\n        event.preventDefault();\n        this.props.setUserName(this.state.name)\n    }\n\n    render() {\n        return (\n            <div className=\"login-container\">\n                <div className=\"login\">\n                    <CornerTriangle sideX=\"left\" sideY=\"top\" color={\"#575757\"} size={24} />\n                    <IconContext.Provider value={{ color: \"darkslategray\" }}>\n                        <FaUserCircle size={\"100\"}/>\n                        <p><h4>Type your username</h4></p>\n                        <div>\n                            <input\n                                type=\"text\"\n                                name=\"name\"\n                                placeholder=\"Username\"\n                                value={this.state.name}\n                                onChange={this.setInputValue}\n                                style={{ margin: \"10px\" }}\n                            />\n                        </div>\n                    <button onClick={this.onEnterClicked} className=\"button-green\">Enter</button>\n                    </IconContext.Provider>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Login\n","import React from \"react\";\nimport TextEditor from \"./TextEditor\";\nimport Users from \"./Users\";\nimport Login from \"./Login\";\n\nfunction Main(props) {\n    return (\n        <main>\n            <Users users={props.users} />\n            {props.userNameSelected ?\n                <TextEditor content={props.content} setContent={props.setContent} />\n                :\n                <Login setUserName={props.setUserName} />\n            }\n\n        </main>\n    )\n}\n\nexport default Main","import React from \"react\"\nimport CornerTriangle from \"./CornerTriangle\";\n\nfunction Footer() {\n    return (\n        <footer>\n            <CornerTriangle sideX=\"right\" sideY=\"top\" color={\"floralwhite\"} size={24}/>\n            <div>\n                Adrian Ałaszewski &copy; {new Date().getFullYear()}\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer\n","import React, {Component} from 'react'\nimport Header from \"./components/Header\"\nimport Main from \"./components/Main\"\nimport Footer from \"./components/Footer\"\nimport \"./style/style.css\"\n\nconst PORT = '5005'\nconst ADDRESS = 'localhost'\n\nlet webSocket = new WebSocket(`ws://${ADDRESS}:${PORT}`)\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            content: \"\",\n            users: [],\n            userNameSelected: false\n        }\n    }\n\n    componentDidMount() {\n\n        webSocket.onmessage = (msg) => {\n            const data = JSON.parse(msg.data)\n            switch(data.type) {\n                case \"content\": {\n                    this.setState({ content: data.content })\n                    break\n                }\n                case \"newUser\": {\n                    this.setState(prevState => {\n                        const newUsers = [...prevState.users, data.name]\n                        return { users: newUsers }\n                    })\n                    break\n                }\n                case \"startValues\": {\n                    this.setState(prevState => {\n                        const newUsers = prevState.users.concat(data.users)\n                        return { users: newUsers, content: data.content }\n                    })\n                    break\n                }\n                case \"userDisconnected\": {\n                    this.setState(prevState => {\n                        const newUsers = prevState.users.filter(user => {\n                            return user !== data.name\n                        })\n                        return { users: newUsers }\n                    })\n                    break\n                }\n                default: console.log(`Unknown message type: ${msg.type}`)\n            }\n\n        }\n    }\n\n    onContentChanged = (content) => {\n        this.setState({ content: content })\n        this.sendContent(content)\n    }\n\n    setUserName = (name) => {\n        this.setState( prevState => {\n            const newUsers = [...prevState.users, name]\n            return {\n                users: newUsers,\n                userNameSelected: true\n            }\n        })\n\n        const msg = {\n            type: \"newUser\",\n            name: name\n        }\n        webSocket.send(JSON.stringify(msg))\n    }\n\n    sendContent(content) {\n        const msg = {\n            type: \"content\",\n            author: \"AuthorPlaceholder\",\n            content: content\n        }\n        webSocket.send(JSON.stringify(msg))\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <Main\n                    content={this.state.content}\n                    setContent={this.onContentChanged}\n                    users={this.state.users}\n                    userNameSelected={this.state.userNameSelected}\n                    setUserName={this.setUserName}\n                />\n                <Footer />\n            </div>\n        )\n    }\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}