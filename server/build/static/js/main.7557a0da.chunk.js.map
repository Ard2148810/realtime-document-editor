{"version":3,"sources":["components/Header.js","components/TextEditor.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","TextEditor","className","text","this","props","onChange","setContent","options","placeholder","Component","Main","content","Footer","Date","getFullYear","App","setState","console","log","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0QAUeA,MARf,WACI,OACI,6D,gBCoBOC,G,mLAhBP,OACI,kBAAC,IAAD,CACIC,UAAU,cACVC,KAAMC,KAAKC,MAAMF,KACjBG,SAAUF,KAAKC,MAAME,WACrBC,QAAS,CACLC,YAAa,CACTN,KAAM,uC,GAVLO,cCSVC,MAXf,SAAcN,GACV,OACI,8BACI,kBAAC,EAAD,CACIO,QAASP,EAAMO,QACfL,WAAYF,EAAME,eCInBM,MAVf,WACI,OACI,gCACI,6DAC8B,IAAIC,MAAOC,iBC8BtCC,G,8DA3BX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAMVE,WAAa,SAACK,GACV,EAAKK,SAAS,CAAEL,QAASA,IACzBM,QAAQC,IAAR,8BAAmCP,KAPnC,EAAKQ,MAAQ,CACTR,QAAS,gBAHE,E,qDAcf,OACI,yBAAKV,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMU,QAASR,KAAKgB,MAAMR,QACpBL,WAAYH,KAAKG,aAEvB,kBAAC,EAAD,W,GAtBEG,cCKEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.7557a0da.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Header() {\n    return (\n        <header>\n            Realtime document editor\n        </header>\n    )\n}\n\nexport default Header","import React, {Component} from \"react\"\nimport Editor from'react-medium-editor'\nimport 'medium-editor/dist/css/medium-editor.css';\nimport 'medium-editor/dist/css/themes/default.css';\n\nclass TextEditor extends Component {\n\n    render() {\n        return (\n            <Editor\n                className=\"text-editor\"\n                text={this.props.text}\n                onChange={this.props.setContent}\n                options={{\n                    placeholder: {\n                        text: \"You can start typing here...\"\n                    }\n                }}\n            />\n        );\n    }\n\n}\n\nexport default TextEditor;","import React from \"react\";\nimport TextEditor from \"./TextEditor\";\n\nfunction Main(props) {\n    return (\n        <main>\n            <TextEditor\n                content={props.content}\n                setContent={props.setContent}\n            />\n        </main>\n    )\n}\n\nexport default Main","import React from \"react\"\n\nfunction Footer() {\n    return (\n        <footer>\n            <div>\n                Adrian AÅ‚aszewski &copy; {new Date().getFullYear()}\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer","import React, {Component} from 'react'\nimport Header from \"./components/Header\"\nimport Main from \"./components/Main\"\nimport Footer from \"./components/Footer\"\nimport \"./style/style.css\"\nimport \"./style/content.css\"\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: \"<p><br/></p>\"\n        }\n    }\n\n    setContent = (content) => {\n        this.setState({ content: content })\n        console.log(`Setting content to: ${content}`)\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <Main content={this.state.content}\n                      setContent={this.setContent}\n                />\n                <Footer />\n            </div>\n        )\n    }\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}